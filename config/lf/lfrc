# lfrc
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/preview'
set shell bash
set ignorecase 
set icons 
set number
set relativenumber
set mouse
set info size
set shellopts '-eu'
set ifs "\n"
set scrolloff 5
set cursorpreviewfmt "\033[7;2m"
set dircounts 
set incsearch

cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        application/x-executable) "$f";;
        *) xdg-open "$f" ;;
    esac
}}

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}
# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd create %{{
    name="$1"
    # Check if the input contains a directory and a file
    if [[ -d "$name" ]]; then
        echo "Directory '$name' already exists."
    elif [[ -f "$name" ]]; then
        echo "File '$name' already exists."
    elif [[ "$name" == */* ]]; then
        # Extract directory path and file name
        directory="${name%/*}"
        file="${name##*/}"
        
        # Create directory if it doesn't exist
        if [[ ! -d "$directory" ]]; then
            mkdir -p "$directory"
            shell "echo 'Directory created: $directory'"
        fi
        
        # Create file
        touch "$directory/$file"
        echo "File created: $directory/$file"
    else
        # Check if the input is a directory
        if [[ "$name" == */ ]]; then
            name="${name%/}"
            mkdir -p "$name"
            echo "Directory created: $name"
        else
            # Check if the input is a file
            touch "$name"
            echo "File created: $name"
        fi
    fi
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

map a push :create<space>
map D delete
map <backspace> set hidden!
map E extract
map p paste
map R bulk-rename
# execute current file (must be executable)
map x $$f
map X !$f
# dedicated keys for file opener actions
map o open
map O $mimeopen --ask $f
map v :toggle; down
map V invert
map <esc> unselect
